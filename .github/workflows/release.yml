name: Create release

on:
  release:
    types:
      - prereleased
      - released

jobs:
  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
      - name: Run tests
        run: make ci

  build-all:
    name: Build all platforms
    runs-on: macos-latest
    needs: test
    steps:
      # strip off refs/tags/ and the v prefix (if it exists)
      - name: Set release env var
        run: |
          version=${GITHUB_REF#refs/*/}
          stripped_version=${version#v}
          echo "VERSION=${stripped_version}" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
      - name: Vendor packages
        run: make mod
      - name: Install CI utilities
        run: make prepare
      - name: Compile binaries
        run: make compile
      - name: Package binaries
        run: make dist

      - name: Get release information
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Release Assets
        uses: NBTX/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          targets: ./dist/*

  choco:
    name: Publish to Chocolatey
    runs-on: windows-latest
    needs: test

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2.3.4

      - name: Install packages
        run: make mod

      - name: Build gossamer3 and push to choco
        run: .\choco\deploy.ps1
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}

      - name: Store artifacts on failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: choco-release
          path: |
            choco\gossamer3.*.nupkg
            choco\gossamer3.zip
            choco\gossamer3.zip.sha256

# ----------------------------------------------------------------------------------------------------------------------

#  build-mac:
#    name: Mac build
#    runs-on: macos-latest
#    steps:
#      # strip off refs/tags/ and the v prefix (if it exists)
#      - name: Set release env var
#        run: |
#          version=${GITHUB_REF#refs/*/}
#          stripped_version=${version#v}
#          echo ::set-env name=VERSION::${stripped_version}
#      - name: Checkout code
#        uses: actions/checkout@v2.3.4
#      - name: Set up Go 1.x
#        uses: actions/setup-go@v2
#        with:
#          go-version: ^1.14
#      - name: Vendor packages
#        run: make mod
#      - name: Run tests
#        run: make ci
#      - name: Compile binary
#        run: go build -o "build/gossamer3_${VERSION}_darwin_amd64/gossamer3" -ldflags "-X main.Version=${VERSION}" "./cmd/gossamer3"
##      - name: Compile binaries
##        run: make compile
#      - name: Package binary
#        run: make dist
#
#      - name: Get release information
#        id: get_release
#        uses: bruceadams/get-release@v1.2.2
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#
#      - name: Upload Release Assets
#        uses: NBTX/upload-release-assets@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.get_release.outputs.upload_url }}
#          targets: ./dist/*
#
#  build-linux:
#    name: Linux build
#    runs-on: ubuntu-latest
#    steps:
#      # strip off refs/tags/ and the v prefix (if it exists)
#      - name: Set release env var
#        run: |
#          version=${GITHUB_REF#refs/*/}
#          stripped_version=${version#v}
#          echo ::set-env name=VERSION::${stripped_version}
#      - name: Checkout code
#        uses: actions/checkout@v2.3.4
#      - name: Set up Go 1.x
#        uses: actions/setup-go@v2
#        with:
#          go-version: ^1.14
#      - name: Vendor packages
#        run: make mod
#      - name: Run tests
#        run: make ci
#      - name: Compile binary
#        run: go build -o "build/gossamer3_${VERSION}_linux_amd64/gossamer3" -ldflags "-X main.Version=${VERSION}" "./cmd/gossamer3"
#      - name: Package binary
#        run: make dist
#
#      - name: Get release information
#        id: get_release
#        uses: bruceadams/get-release@v1.2.2
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#
#      - name: Upload Release Assets
#        uses: NBTX/upload-release-assets@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.get_release.outputs.upload_url }}
#          targets: ./dist/*
#
#
#  build-windows:
#    name: Windows build
#    runs-on: windows-latest
#    steps:
#      # strip off refs/tags/ and the v prefix (if it exists)
#      - name: Set release env var
#        run: |
#          $ver = $env:GITHUB_REF.Split("/")[2].Split('v')[1]
#          echo ::set-env name=VERSION::${ver}
#      - name: Checkout code
#        uses: actions/checkout@v2.3.4
#      - name: Set up Go 1.x
#        uses: actions/setup-go@v2
#        with:
#          go-version: ^1.14
#      - name: Vendor packages
#        run: make mod
#      - name: Run tests
#        run: make ci
#      - name: Compile binary
#        run: go build -o "build/gossamer3_${env:VERSION}_windows_amd64/gossamer3.exe" -ldflags "-X main.Version=${env:VERSION}" "./cmd/gossamer3"
#      - name: Package binary
#        run: make dist
#
#      - name: Get release information
#        id: get_release
#        uses: bruceadams/get-release@v1.2.2
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#
#      - name: Upload Release Assets
#        uses: NBTX/upload-release-assets@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.get_release.outputs.upload_url }}
#          targets: ./dist/*
